{"ast":null,"code":"import { MapsActionTypes } from \"../../types/maps\";\n// Todo update DEFAULT_CITY TO ARR INIT LOCAL STR\nconst DEFAULT_CITY = 703448;\nconst savedCityCodes = localStorage.getItem('CityCodes');\nconst getInitialCityCodes = () => {\n  if (!savedCityCodes || !JSON.parse(savedCityCodes)) {\n    return [DEFAULT_CITY];\n  }\n  return JSON.parse(savedCityCodes);\n};\nconst initialState = {\n  data: [],\n  codes: getInitialCityCodes(),\n  loading: false,\n  error: null\n};\nexport const mapsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case MapsActionTypes.FETCH_MAPS:\n      return {\n        ...state,\n        loading: true\n      };\n    case MapsActionTypes.FETCH_MAPS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload\n      };\n    case MapsActionTypes.FETCH_MAPS_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case MapsActionTypes.ADD_MAP:\n      if (state.codes.includes(action.payload)) {\n        return state;\n      }\n      const updatedCodes = [...state.codes, action.payload];\n      localStorage.setItem('CityCodes', JSON.stringify(updatedCodes));\n      return {\n        ...state,\n        codes: updatedCodes\n      };\n    case MapsActionTypes.DELETE_MAP:\n      // Todo: refilter\n      const updatedCodesAfterRemove = state.codes.reduce((arr, e) => {\n        if (e != action.payload) {\n          arr.push(e);\n        }\n        return arr;\n      }, []);\n      localStorage.setItem('CityCodes', JSON.stringify(updatedCodesAfterRemove));\n      return {\n        ...state,\n        loading: false,\n        codes: updatedCodesAfterRemove\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["MapsActionTypes","DEFAULT_CITY","savedCityCodes","localStorage","getItem","getInitialCityCodes","JSON","parse","initialState","data","codes","loading","error","mapsReducer","state","arguments","length","undefined","action","type","FETCH_MAPS","FETCH_MAPS_SUCCESS","payload","FETCH_MAPS_ERROR","ADD_MAP","includes","updatedCodes","setItem","stringify","DELETE_MAP","updatedCodesAfterRemove","reduce","arr","e","push"],"sources":["C:/Users/danie/OneDrive/Desktop/WWIYT/src/store/reducers/mapsReducers.ts"],"sourcesContent":["import { MapsActionTypes, MapsState } from \"../../types/maps\"\r\nimport { MapsAction } from \"../../types/maps\"\r\n// Todo update DEFAULT_CITY TO ARR INIT LOCAL STR\r\nconst DEFAULT_CITY = 703448;\r\nconst savedCityCodes = localStorage.getItem('CityCodes');\r\nconst getInitialCityCodes = ():number[] => {\r\n    if(!savedCityCodes || !JSON.parse(savedCityCodes)) {\r\n        return [DEFAULT_CITY]\r\n    }\r\n    return JSON.parse(savedCityCodes)\r\n}\r\n\r\nconst initialState: MapsState = {\r\n    data: [],\r\n    codes:getInitialCityCodes(),\r\n    loading:false,\r\n    error:null\r\n}\r\n\r\nexport const mapsReducer = (state:MapsState = initialState, action:MapsAction): MapsState => {\r\n    switch (action.type){\r\n        case MapsActionTypes.FETCH_MAPS:\r\n            return {...state, loading:true}\r\n        case MapsActionTypes.FETCH_MAPS_SUCCESS:\r\n            return {...state, loading:false, data: action.payload}\r\n        case MapsActionTypes.FETCH_MAPS_ERROR:\r\n            return {...state, loading:false, error: action.payload}\r\n        case MapsActionTypes.ADD_MAP:\r\n            if(state.codes.includes(action.payload)){\r\n                return state\r\n            }\r\n            const updatedCodes = [...state.codes, action.payload];\r\n            localStorage.setItem('CityCodes', JSON.stringify(updatedCodes));\r\n            return {...state, codes:updatedCodes}\r\n        case MapsActionTypes.DELETE_MAP:\r\n            // Todo: refilter\r\n            const updatedCodesAfterRemove = state.codes.reduce((arr:number[], e) => {\r\n            if(e != action.payload) {\r\n                arr.push(e);\r\n            }\r\n            return arr;\r\n            }, [])\r\n            localStorage.setItem('CityCodes', JSON.stringify(updatedCodesAfterRemove))\r\n            return {...state, loading:false, codes: updatedCodesAfterRemove}\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"AAAA,SAASA,eAAe,QAAmB,kBAAkB;AAE7D;AACA,MAAMC,YAAY,GAAG,MAAM;AAC3B,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AACxD,MAAMC,mBAAmB,GAAGA,CAAA,KAAe;EACvC,IAAG,CAACH,cAAc,IAAI,CAACI,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC,EAAE;IAC/C,OAAO,CAACD,YAAY,CAAC;EACzB;EACA,OAAOK,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC;AACrC,CAAC;AAED,MAAMM,YAAuB,GAAG;EAC5BC,IAAI,EAAE,EAAE;EACRC,KAAK,EAACL,mBAAmB,CAAC,CAAC;EAC3BM,OAAO,EAAC,KAAK;EACbC,KAAK,EAAC;AACV,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkE;EAAA,IAAjEC,KAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,MAAiB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzE,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKnB,eAAe,CAACoB,UAAU;MAC3B,OAAO;QAAC,GAAGN,KAAK;QAAEH,OAAO,EAAC;MAAI,CAAC;IACnC,KAAKX,eAAe,CAACqB,kBAAkB;MACnC,OAAO;QAAC,GAAGP,KAAK;QAAEH,OAAO,EAAC,KAAK;QAAEF,IAAI,EAAES,MAAM,CAACI;MAAO,CAAC;IAC1D,KAAKtB,eAAe,CAACuB,gBAAgB;MACjC,OAAO;QAAC,GAAGT,KAAK;QAAEH,OAAO,EAAC,KAAK;QAAEC,KAAK,EAAEM,MAAM,CAACI;MAAO,CAAC;IAC3D,KAAKtB,eAAe,CAACwB,OAAO;MACxB,IAAGV,KAAK,CAACJ,KAAK,CAACe,QAAQ,CAACP,MAAM,CAACI,OAAO,CAAC,EAAC;QACpC,OAAOR,KAAK;MAChB;MACA,MAAMY,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACJ,KAAK,EAAEQ,MAAM,CAACI,OAAO,CAAC;MACrDnB,YAAY,CAACwB,OAAO,CAAC,WAAW,EAAErB,IAAI,CAACsB,SAAS,CAACF,YAAY,CAAC,CAAC;MAC/D,OAAO;QAAC,GAAGZ,KAAK;QAAEJ,KAAK,EAACgB;MAAY,CAAC;IACzC,KAAK1B,eAAe,CAAC6B,UAAU;MAC3B;MACA,MAAMC,uBAAuB,GAAGhB,KAAK,CAACJ,KAAK,CAACqB,MAAM,CAAC,CAACC,GAAY,EAAEC,CAAC,KAAK;QACxE,IAAGA,CAAC,IAAIf,MAAM,CAACI,OAAO,EAAE;UACpBU,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;QACf;QACA,OAAOD,GAAG;MACV,CAAC,EAAE,EAAE,CAAC;MACN7B,YAAY,CAACwB,OAAO,CAAC,WAAW,EAAErB,IAAI,CAACsB,SAAS,CAACE,uBAAuB,CAAC,CAAC;MAC1E,OAAO;QAAC,GAAGhB,KAAK;QAAEH,OAAO,EAAC,KAAK;QAAED,KAAK,EAAEoB;MAAuB,CAAC;IAEpE;MACI,OAAOhB,KAAK;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}