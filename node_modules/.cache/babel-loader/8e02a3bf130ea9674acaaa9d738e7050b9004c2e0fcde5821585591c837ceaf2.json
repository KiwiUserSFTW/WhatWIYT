{"ast":null,"code":"import { MapsActionTypes } from \"../../types/maps\";\nimport ApiService from \"../../api\";\nconst Api = new ApiService();\nexport const getWeatherByCodes = codes => {\n  return async dispatch => {\n    try {\n      if (codes) {\n        dispatch({\n          type: MapsActionTypes.FETCH_MAPS\n        });\n        const response = await Api.getWeather(codes);\n        if (response) {\n          dispatch({\n            type: MapsActionTypes.FETCH_MAPS_SUCCESS,\n            payload: response\n          });\n        }\n      }\n    } catch (error) {\n      dispatch({\n        type: MapsActionTypes.FETCH_MAPS_ERROR,\n        payload: 'loading error'\n      });\n    }\n  };\n};\nexport const getCityCode = name => {\n  return async dispatch => {\n    try {\n      const response = await Api.getCityCode(name);\n      if (response) {\n        dispatch({\n          type: MapsActionTypes.ADD_MAP,\n          payload: response\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const deleteCity = removeCode => {\n  return dispatch => {\n    try {\n      dispatch({\n        type: MapsActionTypes.DELETE_MAP,\n        payload: removeCode\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"names":["MapsActionTypes","ApiService","Api","getWeatherByCodes","codes","dispatch","type","FETCH_MAPS","response","getWeather","FETCH_MAPS_SUCCESS","payload","error","FETCH_MAPS_ERROR","getCityCode","name","ADD_MAP","console","log","deleteCity","removeCode","DELETE_MAP"],"sources":["C:/Users/danie/OneDrive/Desktop/WWIYT/src/store/action-creator/maps.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { MapsAction, MapsActionTypes } from \"../../types/maps\";\r\nimport ApiService from \"../../api\";\r\n\r\nconst Api = new ApiService();\r\nexport const getWeatherByCodes = (codes:number[]): any => {\r\n    return async (dispatch: Dispatch<MapsAction>) => {\r\n        try{\r\n            if(codes) {\r\n                dispatch({ type: MapsActionTypes.FETCH_MAPS })\r\n                const response = await Api.getWeather(codes);\r\n                if(response){\r\n                dispatch({ type: MapsActionTypes.FETCH_MAPS_SUCCESS, payload: response})\r\n                }\r\n            }\r\n        }catch(error) {\r\n            dispatch({type: MapsActionTypes.FETCH_MAPS_ERROR, payload: 'loading error'});\r\n        } \r\n    }\r\n}\r\n\r\nexport const getCityCode = (name:string):any => {\r\n    return async (dispatch:Dispatch<MapsAction>) => {\r\n        try {\r\n            const response = await Api.getCityCode(name);\r\n            if(response) {\r\n                dispatch({type:MapsActionTypes.ADD_MAP, payload:response})\r\n            }\r\n        }catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteCity = (removeCode:number):any => {\r\n    return (dispatch:Dispatch<MapsAction>) => {\r\n        try {\r\n            dispatch({type:MapsActionTypes.DELETE_MAP, payload: removeCode})\r\n        }catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}"],"mappings":"AACA,SAAqBA,eAAe,QAAQ,kBAAkB;AAC9D,OAAOC,UAAU,MAAM,WAAW;AAElC,MAAMC,GAAG,GAAG,IAAID,UAAU,CAAC,CAAC;AAC5B,OAAO,MAAME,iBAAiB,GAAIC,KAAc,IAAU;EACtD,OAAO,MAAOC,QAA8B,IAAK;IAC7C,IAAG;MACC,IAAGD,KAAK,EAAE;QACNC,QAAQ,CAAC;UAAEC,IAAI,EAAEN,eAAe,CAACO;QAAW,CAAC,CAAC;QAC9C,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,UAAU,CAACL,KAAK,CAAC;QAC5C,IAAGI,QAAQ,EAAC;UACZH,QAAQ,CAAC;YAAEC,IAAI,EAAEN,eAAe,CAACU,kBAAkB;YAAEC,OAAO,EAAEH;UAAQ,CAAC,CAAC;QACxE;MACJ;IACJ,CAAC,QAAMI,KAAK,EAAE;MACVP,QAAQ,CAAC;QAACC,IAAI,EAAEN,eAAe,CAACa,gBAAgB;QAAEF,OAAO,EAAE;MAAe,CAAC,CAAC;IAChF;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,WAAW,GAAIC,IAAW,IAAS;EAC5C,OAAO,MAAOV,QAA6B,IAAK;IAC5C,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMN,GAAG,CAACY,WAAW,CAACC,IAAI,CAAC;MAC5C,IAAGP,QAAQ,EAAE;QACTH,QAAQ,CAAC;UAACC,IAAI,EAACN,eAAe,CAACgB,OAAO;UAAEL,OAAO,EAACH;QAAQ,CAAC,CAAC;MAC9D;IACJ,CAAC,QAAMI,KAAK,EAAE;MACVK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IACtB;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMO,UAAU,GAAIC,UAAiB,IAAS;EACjD,OAAQf,QAA6B,IAAK;IACtC,IAAI;MACAA,QAAQ,CAAC;QAACC,IAAI,EAACN,eAAe,CAACqB,UAAU;QAAEV,OAAO,EAAES;MAAU,CAAC,CAAC;IACpE,CAAC,QAAMR,KAAK,EAAE;MACVK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IACtB;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}